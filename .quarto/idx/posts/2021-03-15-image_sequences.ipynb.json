{"title":"Using fastai on sequences of Images","markdown":{"yaml":{"aliases":["/Pytorch/fastai/cv/2021/03/15/image_sequences"],"author":"Thomas Capelle","badges":true,"categories":["Pytorch","fastai","cv"],"date":"2021-03-15","description":"How to use fastai to train an image sequence to image sequence job.","image":"images/timesformer.png","output-file":"2021-03-15-image_sequences.html","title":"Using fastai on sequences of Images","toc":true},"headingText":"UCF101 Action Recognition","containsRefs":false,"markdown":"\n\n\n\n![Timesformer](images/timesformer.png)\n\nThis tutorial uses fastai to process sequences of images.\n- First we will do video classification on the [UCF101 dataset](https://www.crcv.ucf.edu/data/UCF101.php). You will learn how to convert the video to individual frames. We will also build a data processing piepline using fastai's mid level API. \n- Secondly we will build some simple models and assess our accuracy.\n- Finally we will train a SotA transformer based architecture.\n\nThe code and training of different architectures on the UCF101 dataset can be found here:\n- https://github.com/tcapelle/action_recognition/\n\n\n> UCF101 is an action recognition data set of realistic action videos, collected from YouTube, having 101 action categories. This data set is an extension of UCF50 data set which has 50 action categories.\n\n_\"With 13320 videos from 101 action categories, UCF101 gives the largest diversity in terms of actions and with the presence of large variations in camera motion, object appearance and pose, object scale, viewpoint, cluttered background, illumination conditions, etc, it is the most challenging data set to date. As most of the available action recognition data sets are not realistic and are staged by actors, UCF101 aims to encourage further research into action recognition by learning and exploring new realistic action categories\"_\n\n### setup\n\nWe have to download the UCF101 dataset from their website. It is a big dataset (6.5GB), if your connection is slow you may want to do this at night or in a terminal (to avoid blocking the notebook).  fastai's `untar_data` is not capable of downloading this dataset, so we will use `wget` and then unrar the files using `rarfile`.\n\n`fastai`'s datasets are located inside `~/.fastai/archive`, we will download UFC101 there.\n\n>Note: you can run this command on a terminal to avoid blocking the notebook\n\nLet's make a function to`unrar` the downloaded dataset. This function is very similar to `untar_data`, but handles `.rar` files.\n\nTo be consistent, we will extract UCF dataset in `~/.fasta/data`. This is where fastai stores decompressed datasets.\n\n:::{.callout-warning}\n\nunraring a large file like this one is very slow.\n\n:::\n\nThe file structure of the dataset after extraction is one folder per action:\n\ninside, you will find  one video per instance, the videos are in `.avi` format. We will need to convert each video to a sequence of images to able to work with our fastai vision toolset.\n:::{.callout-note}\n\ntorchvision has a built-in video reader that may be capable of simplifying this task\n\n:::\n\n```\nUCF101-frames\n\n├── ApplyEyeMakeup\n|   |── v_ApplyEyeMakeup_g01_c01.avi\n|   ├── v_ApplyEyeMakeup_g01_c02.avi\n|   |   ...\n├── Hammering\n|   ├── v_Hammering_g01_c01.avi\n|   ├── v_Hammering_g01_c02.avi\n|   ├── v_Hammering_g01_c03.avi\n|   |   ...\n...\n├── YoYo\n    ├── v_YoYo_g01_c01.avi\n    ...\n    ├── v_YoYo_g25_c03.avi\n\n```\n\nwe can grab all videos at one using `get_files` and passing the `'.avi` extension\n\nWe can convert the videos to frames using `av`:\n\nWe have`PIL.Image` objects, so we can directly show them using fastai's `show_images` method\n\nlet's grab one video path\n\nWe want to export all videos to frames, les't built a function that is capable of exporting one video to frames, and stores the resulting frames on a folder of the same name.\n\nLet's grab de folder name:\n\nwe will also create a new directory for our `frames` version of UCF. You will need at least 7GB to do this, afterwards you can erase the original UCF101 folder containing the videos.\n\nwe will make a function that takes a video path, and extracts the frames to our new `UCF-frames` dataset with the same folder structure.\n\nNow we can batch process the whole dataset using fastcore's `parallel`. This could be slow on a low CPU count machine. On a 12 core machine it takes 4 minutes.\n\nafter this you get a folder hierarchy that looks like this\n\n```\nUCF101-frames\n\n├── ApplyEyeMakeup\n|   |── v_ApplyEyeMakeup_g01_c01\n|   │   ├── 0.jpg\n|   │   ├── 100.jpg\n|   │   ├── 101.jpg\n|   |   ...\n|   ├── v_ApplyEyeMakeup_g01_c02\n|   │   ├── 0.jpg\n|   │   ├── 100.jpg\n|   │   ├── 101.jpg\n|   |   ...\n├── Hammering\n|   ├── v_Hammering_g01_c01\n|   │   ├── 0.jpg\n|   │   ├── 1.jpg\n|   │   ├── 2.jpg\n|   |   ...\n|   ├── v_Hammering_g01_c02\n|   │   ├── 0.jpg\n|   │   ├── 1.jpg\n|   │   ├── 2.jpg\n|   |   ...\n|   ├── v_Hammering_g01_c03\n|   │   ├── 0.jpg\n|   │   ├── 1.jpg\n|   │   ├── 2.jpg\n|   |   ...\n...\n├── YoYo\n    ├── v_YoYo_g01_c01\n    │   ├── 0.jpg\n    │   ├── 1.jpg\n    │   ├── 2.jpg\n    |   ...\n    ├── v_YoYo_g25_c03\n        ├── 0.jpg\n        ├── 1.jpg\n        ├── 2.jpg\n        ...\n        ├── 136.jpg\n        ├── 137.jpg\n\n```\n\n### Data pipeline\n\nwe have converted all the videos to images, we are ready to start building our fastai data pipeline\n\nwe have one folder per action category, and inside one folder per instance of the action. \n\nwith this function we get individual instances of each action, **these are the image sequences that we need to clasiffy.**. We will build a pipeline that takes as input **instance path**'s.\n\nwe have to sort the video frames numerically. We will patch pathlib's `Path` class to return a list of files conttaines on a folde sorted numerically. It could be a good idea to modify fastcore's `ls` method with an optiional argument `sort_func`.\n\nlet's grab the first 5 frames\n\nWe will build a tuple that contains individual frames and that can show themself. We will use the same idea that on the `siamese_tutorial`. As a video can have many frames, and we don't want to display them all, the `show` method will only display the 1st, middle and last images.\n\nwe will use the mid-level API to create our Dataloader from a transformed list. \n\nwith this setup, we can use the `parent_label` as our labelleing function\n\nWe will use fastai`Datasets` class, we have to pass a `list` of transforms. The first list `[ImageTupleTfm(5)]` is how we grab the `x`'s and the second list `[parent_label, Categorize]]` is how we grab the `y`'s.' So, from each instance path, we grab the first 5 images to construct an `ImageTuple` and we grad the label of the action from the parent folder using `parent_label` and the we `Categorize` the labels.\n\nrefactoring\n\nwe can get better view by overcharging the `show_batch` with our custom type, this is done for every type on fasti lib to present results correctly.\n\n## The TimeDistributed Layer\n\nWe are going to port the equivalent to Keras `TimeDistributed` Layer, this layer enables evaluating a pytorch `Module` over an time axis. The simplest solution would be to do something like:\n\nLet's pretend that we have a batch (16) of sequences (5) of RGB images (3 channels) of size 64 by 64 pixels. Then the resulting tensor has shape\n`(16, 5, 3, 64, 64)` . And you want to feed everyone of this individual images through a `resnet18` as encoder. The simpler option is to split this tensor on 5 `(16, 3, 64, 64)` tensors and feed each of them independently to the resnet. We can define sucha wrapper layer lke this:\n\nLet's try the module:\n\nand we get the layer applied over the \"time\" axis. This was my first approach, but this is very slow, as every image is treated independently. Also it does not support models that take multiple argumnets as inputs, nor kwargs. Let's fix this iseeues one by one. A clear improvement is to \"send\" to the batch dim the images, while calling the module. Instead, we could feed the resnet with a \"fatter\" batch of 16*5 images and then split them:\n\nNice, the same result shape!\n:::{.callout-warning}\n\nThis could potentially make your GPU OOM, take this into account when setting up the batch size.\n\n:::\n\nThe final version that I will be [PR](https://github.com/fastai/fastai/pull/3124) to fastai is this one, it supports multiple `args` and `kwargs` and has both forwards methods.\n\n## The Model\n\nWe will make a simple baseline model. It will encode each frame individually using a pretrained resnet. We make use of the `TimeDistributed` layer to apply the resnet to each frame identically. This simple model will just average the probabilities of each frame individually. A `simple_splitter` function is also provided to avoid destroying the pretrained weights of the encoder.\n\n:::{.callout-note}\n\nWe don't need to put a `sigmoid` layer at the end, as the loss function will fuse the Entropy with the sigmoid to get more numerical stability. Our models will output one value per category. you can recover the predicted class using `torch.sigmoid` and `argmax`.\n\n:::\n\nIt is always a good idea to check what is going inside the model, and what is coming out.\n\nWe are ready to create a Learner. The loss function is not mandatory, as the `DataLoader` already has the Binary Cross Entropy because we used a `Categorify` transform on the outputs when constructing the `Datasets`.\n\nWe will make use of the `MixedPrecision` callback to speed up our training (by calling `to_fp16` on the learner object).\n:::{.callout-note}\n\nThe `TimeDistributed` layer is memory hungry (it pivots the image sequence to the batch dimesion) so if you get OOM errors, try reducing the batchsize.\n\n:::\n\nAs this is a classification problem, we will monitor classification `accuracy`. You can pass the model splitter directly when creating the learner.\n\n68% not bad for our simple baseline with only 5 frames.\n\nWe can improve our model by passing the outputs of the image encoder to an `nn.LSTM` to get some inter-frame relation. To do this, we have to get the features of the image encoder, so we have to modify our code and make use of the `create_body` function and add a pooling layer afterwards.\n\nif we check what is the output of the encoder, for each image, we get a feature map of 512.\n\nthis is perfect as input for a recurrent layer. Let's refactor and add a linear layer at the end. We will output the hidden state to a linear layer to compute the probabilities. The idea behind, is that the hidden state encodes the temporal information of the sequence.\n\nlet's make a splitter function to train the encoder and the rest separetely\n\nthis models is harder to train. A good idea would be to add some Dropout. Let's try increasing the sequence lenght. Another approach would be to use a better layer for this type of task, like the [ConvLSTM](https://paperswithcode.com/method/convlstm) or a Transformer for images that are capable of modelling the spatio-temporal relations in a more sophisticated way.\nSome ideas:\n- Try sampling the frames differently, (randomly spacing, more frames, etc...)\n\n## A Transformer Based models\n> A quick tour on the new transformer based archs\n\nThere are a bunch of transformer based image models that have appeared recently after the introduction of the [Visual Transformer (ViT). ](https://github.com/google-research/vision_transformer). We currently have many variants of this architecture with nice implementation in pytorch integrated to [timm](https://github.com/rwightman/pytorch-image-models) and [@lucidrains](https://github.com/lucidrains/vit-pytorch) maintains a repository with all the variants and elegant pytorch implementations.\n\nRecently the image models have been extended to video/image-sequences, hey use the transformer to encode space and time jointly. Here we will train the [TimeSformer](https://arxiv.org/abs/2102.05095) architecture on the action recognition task as it appears to be the easier to train from scratch. We will use [@lucidrains](https://github.com/lucidrains/TimeSformer-pytorch) implementation.\n\nCurrently we don't have access to pretrained models, but loading the `ViT` weights on some blocks could be possible, but it is not done here.\n\n\n\n### Install\n\nFirst things first, we will need to install the  model:\n\n```\n!pip install -Uq timesformer-pytorch\n```\n\n### Train\n\nthe `TimeSformer` implementation expects a sequence of images in the form of: `(batch_size, seq_len, c, w, h)`. We need to wrap the model to stack the image sequence before feeding the forward method\n","srcMarkdownNoYaml":"\n\n\n\n![Timesformer](images/timesformer.png)\n\nThis tutorial uses fastai to process sequences of images.\n- First we will do video classification on the [UCF101 dataset](https://www.crcv.ucf.edu/data/UCF101.php). You will learn how to convert the video to individual frames. We will also build a data processing piepline using fastai's mid level API. \n- Secondly we will build some simple models and assess our accuracy.\n- Finally we will train a SotA transformer based architecture.\n\nThe code and training of different architectures on the UCF101 dataset can be found here:\n- https://github.com/tcapelle/action_recognition/\n\n## UCF101 Action Recognition\n\n> UCF101 is an action recognition data set of realistic action videos, collected from YouTube, having 101 action categories. This data set is an extension of UCF50 data set which has 50 action categories.\n\n_\"With 13320 videos from 101 action categories, UCF101 gives the largest diversity in terms of actions and with the presence of large variations in camera motion, object appearance and pose, object scale, viewpoint, cluttered background, illumination conditions, etc, it is the most challenging data set to date. As most of the available action recognition data sets are not realistic and are staged by actors, UCF101 aims to encourage further research into action recognition by learning and exploring new realistic action categories\"_\n\n### setup\n\nWe have to download the UCF101 dataset from their website. It is a big dataset (6.5GB), if your connection is slow you may want to do this at night or in a terminal (to avoid blocking the notebook).  fastai's `untar_data` is not capable of downloading this dataset, so we will use `wget` and then unrar the files using `rarfile`.\n\n`fastai`'s datasets are located inside `~/.fastai/archive`, we will download UFC101 there.\n\n>Note: you can run this command on a terminal to avoid blocking the notebook\n\nLet's make a function to`unrar` the downloaded dataset. This function is very similar to `untar_data`, but handles `.rar` files.\n\nTo be consistent, we will extract UCF dataset in `~/.fasta/data`. This is where fastai stores decompressed datasets.\n\n:::{.callout-warning}\n\nunraring a large file like this one is very slow.\n\n:::\n\nThe file structure of the dataset after extraction is one folder per action:\n\ninside, you will find  one video per instance, the videos are in `.avi` format. We will need to convert each video to a sequence of images to able to work with our fastai vision toolset.\n:::{.callout-note}\n\ntorchvision has a built-in video reader that may be capable of simplifying this task\n\n:::\n\n```\nUCF101-frames\n\n├── ApplyEyeMakeup\n|   |── v_ApplyEyeMakeup_g01_c01.avi\n|   ├── v_ApplyEyeMakeup_g01_c02.avi\n|   |   ...\n├── Hammering\n|   ├── v_Hammering_g01_c01.avi\n|   ├── v_Hammering_g01_c02.avi\n|   ├── v_Hammering_g01_c03.avi\n|   |   ...\n...\n├── YoYo\n    ├── v_YoYo_g01_c01.avi\n    ...\n    ├── v_YoYo_g25_c03.avi\n\n```\n\nwe can grab all videos at one using `get_files` and passing the `'.avi` extension\n\nWe can convert the videos to frames using `av`:\n\nWe have`PIL.Image` objects, so we can directly show them using fastai's `show_images` method\n\nlet's grab one video path\n\nWe want to export all videos to frames, les't built a function that is capable of exporting one video to frames, and stores the resulting frames on a folder of the same name.\n\nLet's grab de folder name:\n\nwe will also create a new directory for our `frames` version of UCF. You will need at least 7GB to do this, afterwards you can erase the original UCF101 folder containing the videos.\n\nwe will make a function that takes a video path, and extracts the frames to our new `UCF-frames` dataset with the same folder structure.\n\nNow we can batch process the whole dataset using fastcore's `parallel`. This could be slow on a low CPU count machine. On a 12 core machine it takes 4 minutes.\n\nafter this you get a folder hierarchy that looks like this\n\n```\nUCF101-frames\n\n├── ApplyEyeMakeup\n|   |── v_ApplyEyeMakeup_g01_c01\n|   │   ├── 0.jpg\n|   │   ├── 100.jpg\n|   │   ├── 101.jpg\n|   |   ...\n|   ├── v_ApplyEyeMakeup_g01_c02\n|   │   ├── 0.jpg\n|   │   ├── 100.jpg\n|   │   ├── 101.jpg\n|   |   ...\n├── Hammering\n|   ├── v_Hammering_g01_c01\n|   │   ├── 0.jpg\n|   │   ├── 1.jpg\n|   │   ├── 2.jpg\n|   |   ...\n|   ├── v_Hammering_g01_c02\n|   │   ├── 0.jpg\n|   │   ├── 1.jpg\n|   │   ├── 2.jpg\n|   |   ...\n|   ├── v_Hammering_g01_c03\n|   │   ├── 0.jpg\n|   │   ├── 1.jpg\n|   │   ├── 2.jpg\n|   |   ...\n...\n├── YoYo\n    ├── v_YoYo_g01_c01\n    │   ├── 0.jpg\n    │   ├── 1.jpg\n    │   ├── 2.jpg\n    |   ...\n    ├── v_YoYo_g25_c03\n        ├── 0.jpg\n        ├── 1.jpg\n        ├── 2.jpg\n        ...\n        ├── 136.jpg\n        ├── 137.jpg\n\n```\n\n### Data pipeline\n\nwe have converted all the videos to images, we are ready to start building our fastai data pipeline\n\nwe have one folder per action category, and inside one folder per instance of the action. \n\nwith this function we get individual instances of each action, **these are the image sequences that we need to clasiffy.**. We will build a pipeline that takes as input **instance path**'s.\n\nwe have to sort the video frames numerically. We will patch pathlib's `Path` class to return a list of files conttaines on a folde sorted numerically. It could be a good idea to modify fastcore's `ls` method with an optiional argument `sort_func`.\n\nlet's grab the first 5 frames\n\nWe will build a tuple that contains individual frames and that can show themself. We will use the same idea that on the `siamese_tutorial`. As a video can have many frames, and we don't want to display them all, the `show` method will only display the 1st, middle and last images.\n\nwe will use the mid-level API to create our Dataloader from a transformed list. \n\nwith this setup, we can use the `parent_label` as our labelleing function\n\nWe will use fastai`Datasets` class, we have to pass a `list` of transforms. The first list `[ImageTupleTfm(5)]` is how we grab the `x`'s and the second list `[parent_label, Categorize]]` is how we grab the `y`'s.' So, from each instance path, we grab the first 5 images to construct an `ImageTuple` and we grad the label of the action from the parent folder using `parent_label` and the we `Categorize` the labels.\n\nrefactoring\n\nwe can get better view by overcharging the `show_batch` with our custom type, this is done for every type on fasti lib to present results correctly.\n\n## The TimeDistributed Layer\n\nWe are going to port the equivalent to Keras `TimeDistributed` Layer, this layer enables evaluating a pytorch `Module` over an time axis. The simplest solution would be to do something like:\n\nLet's pretend that we have a batch (16) of sequences (5) of RGB images (3 channels) of size 64 by 64 pixels. Then the resulting tensor has shape\n`(16, 5, 3, 64, 64)` . And you want to feed everyone of this individual images through a `resnet18` as encoder. The simpler option is to split this tensor on 5 `(16, 3, 64, 64)` tensors and feed each of them independently to the resnet. We can define sucha wrapper layer lke this:\n\nLet's try the module:\n\nand we get the layer applied over the \"time\" axis. This was my first approach, but this is very slow, as every image is treated independently. Also it does not support models that take multiple argumnets as inputs, nor kwargs. Let's fix this iseeues one by one. A clear improvement is to \"send\" to the batch dim the images, while calling the module. Instead, we could feed the resnet with a \"fatter\" batch of 16*5 images and then split them:\n\nNice, the same result shape!\n:::{.callout-warning}\n\nThis could potentially make your GPU OOM, take this into account when setting up the batch size.\n\n:::\n\nThe final version that I will be [PR](https://github.com/fastai/fastai/pull/3124) to fastai is this one, it supports multiple `args` and `kwargs` and has both forwards methods.\n\n## The Model\n\nWe will make a simple baseline model. It will encode each frame individually using a pretrained resnet. We make use of the `TimeDistributed` layer to apply the resnet to each frame identically. This simple model will just average the probabilities of each frame individually. A `simple_splitter` function is also provided to avoid destroying the pretrained weights of the encoder.\n\n:::{.callout-note}\n\nWe don't need to put a `sigmoid` layer at the end, as the loss function will fuse the Entropy with the sigmoid to get more numerical stability. Our models will output one value per category. you can recover the predicted class using `torch.sigmoid` and `argmax`.\n\n:::\n\nIt is always a good idea to check what is going inside the model, and what is coming out.\n\nWe are ready to create a Learner. The loss function is not mandatory, as the `DataLoader` already has the Binary Cross Entropy because we used a `Categorify` transform on the outputs when constructing the `Datasets`.\n\nWe will make use of the `MixedPrecision` callback to speed up our training (by calling `to_fp16` on the learner object).\n:::{.callout-note}\n\nThe `TimeDistributed` layer is memory hungry (it pivots the image sequence to the batch dimesion) so if you get OOM errors, try reducing the batchsize.\n\n:::\n\nAs this is a classification problem, we will monitor classification `accuracy`. You can pass the model splitter directly when creating the learner.\n\n68% not bad for our simple baseline with only 5 frames.\n\nWe can improve our model by passing the outputs of the image encoder to an `nn.LSTM` to get some inter-frame relation. To do this, we have to get the features of the image encoder, so we have to modify our code and make use of the `create_body` function and add a pooling layer afterwards.\n\nif we check what is the output of the encoder, for each image, we get a feature map of 512.\n\nthis is perfect as input for a recurrent layer. Let's refactor and add a linear layer at the end. We will output the hidden state to a linear layer to compute the probabilities. The idea behind, is that the hidden state encodes the temporal information of the sequence.\n\nlet's make a splitter function to train the encoder and the rest separetely\n\nthis models is harder to train. A good idea would be to add some Dropout. Let's try increasing the sequence lenght. Another approach would be to use a better layer for this type of task, like the [ConvLSTM](https://paperswithcode.com/method/convlstm) or a Transformer for images that are capable of modelling the spatio-temporal relations in a more sophisticated way.\nSome ideas:\n- Try sampling the frames differently, (randomly spacing, more frames, etc...)\n\n## A Transformer Based models\n> A quick tour on the new transformer based archs\n\nThere are a bunch of transformer based image models that have appeared recently after the introduction of the [Visual Transformer (ViT). ](https://github.com/google-research/vision_transformer). We currently have many variants of this architecture with nice implementation in pytorch integrated to [timm](https://github.com/rwightman/pytorch-image-models) and [@lucidrains](https://github.com/lucidrains/vit-pytorch) maintains a repository with all the variants and elegant pytorch implementations.\n\nRecently the image models have been extended to video/image-sequences, hey use the transformer to encode space and time jointly. Here we will train the [TimeSformer](https://arxiv.org/abs/2102.05095) architecture on the action recognition task as it appears to be the easier to train from scratch. We will use [@lucidrains](https://github.com/lucidrains/TimeSformer-pytorch) implementation.\n\nCurrently we don't have access to pretrained models, but loading the `ViT` weights on some blocks could be possible, but it is not done here.\n\n\n\n### Install\n\nFirst things first, we will need to install the  model:\n\n```\n!pip install -Uq timesformer-pytorch\n```\n\n### Train\n\nthe `TimeSformer` implementation expects a sequence of images in the form of: `(batch_size, seq_len, c, w, h)`. We need to wrap the model to stack the image sequence before feeding the forward method\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"2021-03-15-image_sequences.html","toc":true},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.39","theme":"flatly","title-block-banner":true,"aliases":["/Pytorch/fastai/cv/2021/03/15/image_sequences"],"author":"Thomas Capelle","badges":true,"categories":["Pytorch","fastai","cv"],"date":"2021-03-15","description":"How to use fastai to train an image sequence to image sequence job.","image":"images/timesformer.png","title":"Using fastai on sequences of Images"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}